[{"content":"When building a SIEM, start like you would with other projects\u0026hellip; what are your specifications?\nSpecifications: What are you looking for? What are your inputs? Do you have a strategy? How long to retain data? Normalize the data Inputs and Tooling From here you can determine the right tool and how to configure.\nMost solutions that bill themselves as appropriate for using as a SIEM allow ingesting various input and formats. Just about anything will take JSON input these days, or you might want to take syslog style data, for example. This has more to do with what you want to monitor than the tooling.\nWhat is that you are looking for? That will help define what inputs you need.\nWhat are you looking for?\nAttempts to access to applications or data? Malicious traffic in your WAF? Malicious traffic that made it through the WAF to your app? Privilege elevation events? What are your inputs?\nApplication logs? WAF? Server logs? k8s logs? Retention 30 days is a common retention schedule, but take care if any special regulatory requirements that might require more. The longer you store data, the farther back you can investigate during an incident or for threat hunting. That will likely come at higher storage costs, though.\nMore than once during an investigation we\u0026rsquo;ve found the 30-day retention to be limiting and realized that the initial entry vector for a malicious actor may be unidentifiable because the monitor data has aged out of our SIEM.\nWhile the data in the SIEM may age out, it may be possible to keep the raw data around in the form of text files (in Cloudtrail + S3, for example) for further analysis for much longer. There will just be more overhead in analyzing that data in terms of effort and possible charges if you use a tool like AWS Athena.\nStrategy (and alerting) Will you be alerting from this data? Do you know how to prioritize the alert for investigation Do you have any auto remediation? Do you have a strategy for how the alerts are defined? Who triages the alerts and what kind of training would they need? Are all alerts treated with same level of urgency? Normalization Lastly, I would really, really strongly recommend normalizing the data going into the SIEM. You want to be searching fields that are clearly named like \u0026ldquo;src.ip\u0026rdquo; and not have to deal with multiple and similarly named fields like \u0026ldquo;source.ip\u0026rdquo; or \u0026ldquo;s.ip\u0026rdquo; or \u0026ldquo;IpAddress\u0026rdquo; simultaneously. Some frameworks allow you to process the data before it is inserted into the search indices.\nThis helps to avoid blind spots during an investigation and decrease the remediation time.\n","permalink":"https://galitz.github.io/posts/siem-1/","summary":"When building a SIEM, start like you would with other projects\u0026hellip; what are your specifications?\nSpecifications: What are you looking for? What are your inputs? Do you have a strategy? How long to retain data? Normalize the data Inputs and Tooling From here you can determine the right tool and how to configure.\nMost solutions that bill themselves as appropriate for using as a SIEM allow ingesting various input and formats.","title":"Blue Team: SIEM Short Thoughts #1"},{"content":"The fight against phishing and spam emails is not restricted to incoming email filters and security solutions.\nAnyone sending email outbound likely has DNS records for email that can be locked down.\nRestrict SPF Update your list of servers or providers that can send mail on your behalf and then set the records to hard fail anything else.\nAdd DKIM Add DKIM singatures to ensure the integrity of the contents of emails\nConfigure DMARC policy Setup a DMARC policy to handle emails that appear to be forged/malicious.\nDMARCLY Guide on Implementing SPF/DKIM/DMARC\n","permalink":"https://galitz.github.io/posts/spf_dkim_dmarc/","summary":"The fight against phishing and spam emails is not restricted to incoming email filters and security solutions.\nAnyone sending email outbound likely has DNS records for email that can be locked down.\nRestrict SPF Update your list of servers or providers that can send mail on your behalf and then set the records to hard fail anything else.\nAdd DKIM Add DKIM singatures to ensure the integrity of the contents of emails","title":"Fighting the Phishers"},{"content":"Recent updates:\nAdded a tools link in github repo Updated the redblue examples repo with new content redblue-examples\n","permalink":"https://galitz.github.io/posts/repo-updates-aug2022/","summary":"Recent updates:\nAdded a tools link in github repo Updated the redblue examples repo with new content redblue-examples","title":"Repo Updates Aug 2022"},{"content":"Something often missed in security awareness training for users and customers is the account recovery secret question issue. The issue here is that if people treat them like \u0026ldquo;real questions,\u0026rdquo; and therefore answer honestly it can end up putting their account at risk.\nConsider a common recovery question: \u0026ldquo;What was the name of your first pet?\u0026rdquo; How many \u0026ldquo;Mr Socks\u0026rdquo; could there be in the universe? Well, it turns out quite a few. So that makes it a popular guess for account takeover (ATO) actors. Even more so, gizillions of people post on social media sites events in their lives\u0026hellip; popular on the reddit cat channel, for example, is people posting the passing of their beloved friend. But that means a deeper web/social media search could turn up the name of your first pet; and now your answer is not so secret.\nI generally recommend that folks use a non-sequitur answer to such questions. Things like:\nSecret Question #1: What is the name of your first pet? Answer: 59 Nice and short, and no amount of research by a malicious actor will turn up the answer to that!\n","permalink":"https://galitz.github.io/posts/cred-recovery-secret-question/","summary":"Something often missed in security awareness training for users and customers is the account recovery secret question issue. The issue here is that if people treat them like \u0026ldquo;real questions,\u0026rdquo; and therefore answer honestly it can end up putting their account at risk.\nConsider a common recovery question: \u0026ldquo;What was the name of your first pet?\u0026rdquo; How many \u0026ldquo;Mr Socks\u0026rdquo; could there be in the universe? Well, it turns out quite a few.","title":"Credential Recovery Secret Questions"},{"content":"Credential hunting is relevant to anyone in the infosec/cybersecurity space.\nI\u0026rsquo;ll spare you the long and probably unneeed introduction you get on most blogs and websites. Let\u0026rsquo;s just say that if you commit login credentials to your code or data repositories in plaintext, it is only a matter of time before they are found by malicious actors and used against you.\nSo\u0026hellip; what to do?\nUnder the assumption there may already be credentials from the past in your repositories and sometime in the future some might accidentally get commited, the thing to do is scan for them on a regular basis.\nThere\u0026rsquo;s a number of options, but my go to on this is gitleaks. https://github.com/zricethezav/gitleaks\nThe primary reason is the ability to scan the git commit history. Even if your current code gets cleaned up, the credentials are still visible in the commit history.\nHere is a cleaned up commit:\nRed-blue example 1\nLet\u0026rsquo;s see if we can find the password in the history:\nand here are the links provided by gitleaks:\nRed-blue example 2\nLesson learned: Credentials could be living in unexpected places in your code repositories.\n","permalink":"https://galitz.github.io/posts/gitleaks_1/","summary":"Credential hunting is relevant to anyone in the infosec/cybersecurity space.\nI\u0026rsquo;ll spare you the long and probably unneeed introduction you get on most blogs and websites. Let\u0026rsquo;s just say that if you commit login credentials to your code or data repositories in plaintext, it is only a matter of time before they are found by malicious actors and used against you.\nSo\u0026hellip; what to do?\nUnder the assumption there may already be credentials from the past in your repositories and sometime in the future some might accidentally get commited, the thing to do is scan for them on a regular basis.","title":"Credential hunting with gitleaks"},{"content":"Following up on a previous post on splunk and threat hunting, let\u0026rsquo;s go a step further. We demonstrated a query to show us attempted logins against joomla admin page. We saw what the attempted credentials were, but this resulted in so many lines of output that we couldn\u0026rsquo;t easily compile a list of IPs that we could identify as malicious.\nHere is the original query we talked about:\nindex=botsv1 earliest=0 http_method=POST uri=\u0026#34;/joomla/administrator/index.php\u0026#34; site=\u0026#34;imreallynotbatman.com\u0026#34; src_ip=\u0026#34;23.22.63.114\u0026#34; | table timestamp,form_data If we modify it to remove the table and the src_ip (which was just for example purposes) and add a counter like this:\nindex=botsv1 earliest=0 http_method=POST uri=\u0026#34;/joomla/administrator/index.php\u0026#34; site=\u0026#34;imreallynotbatman.com\u0026#34; | stats count by src_ip We\u0026rsquo;ll get a breakdown of activity to that URI by source IP. Be careful here though, this will also count valid login traffic.\n","permalink":"https://galitz.github.io/posts/threat_hunting_2/","summary":"Following up on a previous post on splunk and threat hunting, let\u0026rsquo;s go a step further. We demonstrated a query to show us attempted logins against joomla admin page. We saw what the attempted credentials were, but this resulted in so many lines of output that we couldn\u0026rsquo;t easily compile a list of IPs that we could identify as malicious.\nHere is the original query we talked about:\nindex=botsv1 earliest=0 http_method=POST uri=\u0026#34;/joomla/administrator/index.","title":"Threat hunting with splunk: sorting by IP"},{"content":"Over in my useful_snippets repo, I just added a neat little example:\nindex=botsv1 earliest=0 http_method=POST uri=\u0026#34;/joomla/administrator/index.php\u0026#34; site=\u0026#34;imreallynotbatman.com\u0026#34; src_ip=\u0026#34;23.22.63.114\u0026#34; | table timestamp,form_data It uses the botsv1 example dataset (provided by splunk), searches the entire history of the dataset for specified URL and sie. It then creates a table with timestamp and the form data as passed in by the browser. This is an example, but you can build off it to manually inspect what users and passwords are being targetted by malicious actors.\n","permalink":"https://galitz.github.io/posts/splunk-botsv1-joomla-admin-example/","summary":"Over in my useful_snippets repo, I just added a neat little example:\nindex=botsv1 earliest=0 http_method=POST uri=\u0026#34;/joomla/administrator/index.php\u0026#34; site=\u0026#34;imreallynotbatman.com\u0026#34; src_ip=\u0026#34;23.22.63.114\u0026#34; | table timestamp,form_data It uses the botsv1 example dataset (provided by splunk), searches the entire history of the dataset for specified URL and sie. It then creates a table with timestamp and the form data as passed in by the browser. This is an example, but you can build off it to manually inspect what users and passwords are being targetted by malicious actors.","title":"Threat hunting with splunk: simple credential attacks"},{"content":"Here is a link to some useful code/cli snippets and one-liners for various situations:\nUseful Snippets\n","permalink":"https://galitz.github.io/posts/useful-links/","summary":"Here is a link to some useful code/cli snippets and one-liners for various situations:\nUseful Snippets","title":"Useful snippets and one-liners"}]